@using ProgrammersBlog.Entities.Dtos;
@using ProgrammersBlog.Shared.Results;
@model IDataResult<CategoryListDto>;
@{
    Layout = "_Layout";
    ViewBag.Title = "Kategoriler Index";
}
<ol class="breadcrumb mb-3 mt-2">
    <li class="breadcrumb-item"><a asp-area="Admin" asp-controller="Home" asp-action="Index">Admin</a></li>
    <li class="breadcrumb-item active"><a asp-area="Admin" asp-controller="Category" asp-action="Index">Kategoriler</a></li>
</ol>
@if (Model.ResultStatus == ResultStatus.Success)
{
    <div id="modalPlaceHolder" aria-hidden="true"></div>
    <div class="card mb-4 mt-2">
        <div class="card-header">
            <i class="fas fa-table mr-1"></i>
            Kategoriler
        </div>
        <div class="card-body">
            <div class="spinner-border text-primary" style="display:none" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <div class="table-responsive">
                <table class="table table-bordered" id="categoriesTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Adı</th>
                            <th>Açıklaması</th>
                            <th>Aktif Mi?</th>
                            <th>Silinmiş Mi?</th>
                            <th>Not</th>
                            <th>Oluşturulma Tarihi</th>
                            <th>Oluşturan Kullanıcı Adı</th>
                            <th>Son Düzenlenme Tarihi</th>
                            <th>Son Düzenleyen Kullanıcı Adı</th>
                            <th>Operasyonlar</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>ID</th>
                            <th>Adı</th>
                            <th>Açıklaması</th>
                            <th>Aktif Mi?</th>
                            <th>Silinmiş Mi?</th>
                            <th>Not</th>
                            <th>Oluşturulma Tarihi</th>
                            <th>Oluşturan Kullanıcı Adı</th>
                            <th>Son Düzenlenme Tarihi</th>
                            <th>Son Düzenleyen Kullanıcı Adı</th>
                            <th>Operasyonlar</th>
                        </tr>
                    </tfoot>
                    <tbody>
                        @foreach (var category in Model.Data.Categories)
                        {
                            <tr name="row_@category.Id">
                                <td>@category.Id</td>
                                <td>@category.Name</td>
                                <td>@category.Description</td>
                                <td>@category.IsActive</td>
                                <td>@category.IsDeleted</td>
                                <td>@category.Note</td>
                                <td>@category.CreatedDate.ToShortDateString()</td>
                                <td>@category.CreatedByName</td>
                                <td>@category.ModifiedDate.ToShortDateString()</td>
                                <td>@category.ModifiedByName</td>
                                <td>
                                    <button class="btn btn-sm btn-primary btn-update" data-id="@category.Id">
                                        <span class="fa fa-solid fa-pen-to-square">Düzenle</span>
                                    </button>
                                    <button class="btn btn-sm btn-danger btn-delete" data-id="@category.Id">
                                        <span class="fa fa-solid fa-trash-can">Sil</span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@if (Model.ResultStatus == ResultStatus.Error)
{
    <div class="alert alert-danger mt-3">
        @Model.Message <br />
        Dashboard sayfasına geri dönmek için lütfen <a class="alert-link" asp-area="Admin" asp-controller="Home" asp-action="Index">tıklayınız.</a>
    </div>
}
@section Scripts
    {
    <script>
        $(document).ready(function () {
            //Datatable
            const dataTable = $('#categoriesTable').DataTable({
                dom:
                    "<'row'<'col-sm-3'l><'col-sm-6 text-center'B><'col-sm-3'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                buttons: [
                    {
                        text: 'Ekle',
                        attr: {
                            id: "btnAdd"
                        },
                        className: 'btn btn-success',
                        action: function (e, dt, node, config) {

                        }
                    },
                    {
                        // Get Datas Button
                        text: 'Yenile',
                        className: 'btn btn-warning',
                        action: function (e, dt, node, config) {
                            $.ajax({
                                type: 'GET',
                                url: '/Admin/Category/GetAllCategories',
                                contentType: 'apllicaton/json',
                                beforeSend: function () {
                                    $('#categoriesTable').hide();
                                    $('.spinner-border').show();
                                },
                                success: function (data) {
                                    const categoryListDto = jQuery.parseJSON(data);
                                    dataTable.clear();
                                    console.log(categoryListDto);
                                    if (categoryListDto.ResultStatus == 1) {
                                        $.each(categoryListDto.Categories.$values, function (index, category) {
                                            const newTableRow = dataTable.row.add([
                                                category.Id,
                                                category.Name,
                                                category.Description,
                                                convertFirstLetterToUpperCase(category.IsActive.toString()),
                                                convertFirstLetterToUpperCase(category.IsDeleted.toString()),
                                                category.Note,
                                                convertShortDate(category.CreatedDate),
                                                category.CreatedByName,
                                                convertShortDate(category.ModifiedDate),
                                                category.ModifiedByName,
                                                `
                                                                  <button class="btn btn-primary btn-sm btn-update" data-id="${category.Id}"><span class="fas fa-edit"></span></button>
                                                        <button class="btn btn-danger btn-sm btn-delete" data-id="${category.Id}"><span class="fas fa-minus-circle"></span></button>
                                                `
                                            ]).node();
                                            const jqueryTableRow = $(newTableRow);
                                            jqueryTableRow.attr('name', `row_${category.Id}`);
                                        });
                                        dataTable.draw();
                                        $('.spinner-border').hide();
                                        $('#categoriesTable').fadeIn(1400);
                                    }
                                    else {
                                        toastr.error(`${categoryListDto.Message}`, 'İşlem Başarısız!');
                                    }
                                },
                                error: function (err) {
                                    console.log(err);
                                    $('.spinner-border').hide();
                                    $('#usersTable').fadeIn(1000);
                                    toastr.error(`${err.responseText}`, 'Hata!');
                                }
                            });
                        }
                    }
                ],
                language: {
                    "sDecimal": ",",
                    "sEmptyTable": "Tabloda herhangi bir veri mevcut değil",
                    "sInfo": "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                    "sInfoEmpty": "Kayıt yok",
                    "sInfoFiltered": "(_MAX_ kayıt içerisinden bulunan)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Sayfada _MENU_ kayıt göster",
                    "sLoadingRecords": "Yükleniyor...",
                    "sProcessing": "İşleniyor...",
                    "sSearch": "Ara:",
                    "sZeroRecords": "Eşleşen kayıt bulunamadı",
                    "oPaginate": {
                        "sFirst": "İlk",
                        "sLast": "Son",
                        "sNext": "Sonraki",
                        "sPrevious": "Önceki"
                    },
                    "oAria": {
                        "sSortAscending": ": artan sütun sıralamasını aktifleştir",
                        "sSortDescending": ": azalan sütun sıralamasını aktifleştir"
                    },
                    "select": {
                        "rows": {
                            "_": "%d kayıt seçildi",
                            "0": "",
                            "1": "1 kayıt seçildi"
                        }
                    }
                }
            });

            /* Ajax Get / Data Add. */

            $(function () {
                const url = `@Url.Action("Add","Category")`;
                const placeHolder = $("#modalPlaceHolder");
                $("#btnAdd").click(function () {
                    $.get(url).done(function (data) {
                        placeHolder.html(data);
                        placeHolder.find(".modal").modal("show");
                    });
                });

                /* Ajax POST / Data Add. */

                placeHolder.on('click',
                    '#btnSave',
                    function (event) {
                        event.preventDefault();
                        const form = $('#form-category-add');
                        const actionUrl = form.attr('action');
                        const dataToSend = new FormData(form.get(0));

                        $.ajax({
                            url: actionUrl,
                            type: 'POST',
                            data: dataToSend,
                            processData: false,
                            contentType: false,
                            success: function(data){
                                const categoryAddAjaxModel = jQuery.parseJSON(data);
                                console.log(categoryAddAjaxModel);
                                const newFormBody = $('.modal-body', categoryAddAjaxModel.CategoryAddPartial);
                                placeHolder.find('.modal-body').replaceWith(newFormBody);
                                const isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                                console.log(isValid);
                                if (isValid) {
                                    placeHolder.find('.modal').modal('hide');
                                    const newTableRow = dataTable.row.add([
                                        categoryAddAjaxModel.Category.Id,
                                        categoryAddAjaxModel.Category.Name,
                                        categoryAddAjaxModel.Category.Description,
                                        convertFirstLetterToUpperCase(categoryAddAjaxModel.Category.IsActive.toString()),
                                        convertFirstLetterToUpperCase(categoryAddAjaxModel.Category.IsDeleted.toString()),
                                        categoryAddAjaxModel.Category.Note,
                                        convertShortDate(categoryAddAjaxModel.Category.CreatedDate),
                                        categoryAddAjaxModel.Category.CreatedByName,
                                        convertShortDate(categoryAddAjaxModel.Category.ModifiedDate),
                                        categoryAddAjaxModel.Category.ModifiedByName,
                                        `
                                                                          <button class="btn btn-primary btn-sm btn-update" data-id="${categoryAddAjaxModel.Category.Id}"><span class="fas fa-edit"></span></button>
                                                                <button class="btn btn-danger btn-sm btn-delete" data-id="${categoryAddAjaxModel.Category.Id}"><span class="fas fa-minus-circle"></span></button>
                                                        `
                                    ]).node();
                                    const jqueryTableRow = $(newTableRow);
                                    jqueryTableRow.attr('name', `row_${categoryAddAjaxModel.Category.Id}`);

                                    dataTable.row(newTableRow).draw();
                                    toastr.success(`${categoryAddAjaxModel.Message}`, 'Başarılı İşlem!');
                                } else {
                                    let summaryText = "";
                                    $('#validation-summary > ul > li').each(function () {
                                        let text = $(this).text();
                                        summaryText = `*${text}\n`;
                                    });
                                    toastr.warning(summaryText);
                                }
                            }
                        })
                    });
            });

            /* Ajax POST / Data Delete. */

            $(document).on("click", ".btn-delete", function (event) {
                event.preventDefault();
                const categoryId = $(this).attr("data-id");
                const tableRow = $(`[name="row_${categoryId}"]`);
                const categoryName = $(`[name="row_${categoryId}"]>td`).eq(1).text();
                Swal.fire({
                    title: "Silmek istediğinizden emin misiniz?",
                    text: `${categoryName} adlı kategoriyi silinecektir.`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Evet!",
                    cancelButtonText: "Hayır!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            type: "post",
                            dataType: "json",
                            async:true,
                            data: { id: categoryId },
                            url: '@Url.Action("Delete","Category")',
                            success: function (data) {
                                const jsonData = jQuery.parseJSON(data);
                                console.log(jsonData);
                                if (jsonData.ResultStatus === 1) {
                                    dataTable.row(tableRow).remove().draw();
                                    Swal.fire({
                                        title: "Silindi!",
                                        text: `${jsonData.Data.Name} başarıyla silindi.`,
                                        icon: "success"
                                    });

                                    
                                }
                                else {
                                    Swal.fire({
                                        icon: "error",
                                        title: "Hata",
                                        text: `${jsonData.Message}`
                                    });
                                }

                            },
                            error: function (err) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Hata",
                                    text: `${err}`
                                });
                            }
                        });

                    }
                });
            });

            /* Ajax GET / Data Update. */

            $(function () {
                const url = `@Url.Action("Update","Category")`;
                const placeHolder = $("#modalPlaceHolder");
                $(document).on('click', '.btn-update', function (event) {
                    event.preventDefault();
                    const categoryId = $(this).attr('data-id');
                    $.get(url, { id: categoryId }).done(function (data) {
                        placeHolder.html(data);
                        placeHolder.find('.modal').modal('show');
                    }).fail(function () {
                        toastr.error('Bir hata oluştu');
                    });
                });

                /* Ajax POST / Data Update. */

                placeHolder.on('click',
                    '#btnUpdateSave',
                    function (event) {

                        event.preventDefault();

                        const form = $('#form-category-update');
                        const actionUrl = form.attr('action');
                        const dataToSend = new FormData(form.get(0));
                        $.ajax({
                            url: actionUrl,
                            type: 'POST',
                            data: dataToSend,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                const categoryUpdateAjaxModel = jQuery.parseJSON(data);
                                console.log(categoryUpdateAjaxModel);
                                const id = categoryUpdateAjaxModel.Category.Id;
                                const tableRow = $(`[name="row_${id}"]`);
                                const newFormBody = $('.modal-body', categoryUpdateAjaxModel.CategoryUpdatePartial);
                                placeHolder.find('.modal-body').replaceWith(newFormBody);
                                const isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                                console.log(isValid);
                                if (isValid) {
                                    placeHolder.find('.modal').modal('hide');
                                    dataTable.row(tableRow).data([
                                        categoryUpdateAjaxModel.Category.Id,
                                        categoryUpdateAjaxModel.Category.Name,
                                        categoryUpdateAjaxModel.Category.Description,
                                        convertFirstLetterToUpperCase(categoryUpdateAjaxModel.Category.IsActive.toString()),
                                        convertFirstLetterToUpperCase(categoryUpdateAjaxModel.Category.IsDeleted.toString()),
                                        categoryUpdateAjaxModel.Category.Note,
                                        convertShortDate(categoryUpdateAjaxModel.Category.CreatedDate),
                                        categoryUpdateAjaxModel.Category.CreatedByName,
                                        convertShortDate(categoryUpdateAjaxModel.Category.ModifiedDate),
                                        categoryUpdateAjaxModel.Category.ModifiedByName,
                                        `
                                                                                                  <button class="btn btn-primary btn-sm btn-update" data-id="${categoryUpdateAjaxModel.Category.Id}"><span class="fas fa-edit"></span></button>
                                                                                                <button class="btn btn-danger btn-sm btn-delete" data-id="${categoryUpdateAjaxModel.Category.Id}"><span class="fas fa-minus-circle"></span></button>
                                                                `
                                    ]).node();

                                    tableRow.attr('name', `row_${categoryUpdateAjaxModel.Category.Id}`);
                                    dataTable.row(tableRow).invalidate();
                                    toastr.success(`${categoryUpdateAjaxModel.Message}`, 'Başarılı İşlem!');
                                } else {
                                    let summaryText = "";
                                    $('#validation-summary > ul > li').each(function () {
                                        let text = $(this).text();
                                        summaryText = `*${text}\n`;
                                    });
                                    toastr.warning(summaryText);
                                }
                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });
                    });
            });

        });


    </script>
}


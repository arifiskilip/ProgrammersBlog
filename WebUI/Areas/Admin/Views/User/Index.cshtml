@using ProgrammersBlog.Shared.Results;
@model ProgrammersBlog.Entities.Dtos.UserListDto
@{
    Layout = "_Layout";
    ViewBag.Title = "Kullanıcılar Index";
}
<ol class="breadcrumb mb-3 mt-2">
    <li class="breadcrumb-item"><a asp-area="Admin" asp-controller="Home" asp-action="Index">Admin</a></li>
    <li class="breadcrumb-item active"><a asp-area="Admin" asp-controller="User" asp-action="Index">Kullanıcılar</a></li>
</ol>
@if (Model.ResultStatus == ResultStatus.Success)
{
    <div id="modalPlaceHolder" aria-hidden="true"></div>
    <div class="card mb-4 mt-2">
        <div class="card-header">
            <i class="fas fa-table mr-1"></i>
            Kullanıcılar
        </div>
        <div class="card-body">
            <div class="spinner-border" role="status" style="display: none;">
                <span class="sr-only">Yükleniyor...</span>
            </div>
            <div class="table-responsive">
                <table class="table table-bordered" id="usersTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Kullanıcı Adı</th>
                            <th>E-Posta Adresi</th>
                            <th>Telefon Numarası</th>
                            <th>Resim</th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>ID</th>
                            <th>Kullanıcı Adı</th>
                            <th>E-Posta Adresi</th>
                            <th>Telefon Numarası</th>
                            <th>Resim</th>
                            <th>İşlemler</th>
                        </tr>
                    </tfoot>
                    <tbody>
                        @foreach (var user in Model.Users)
                        {
                            <tr name="row_@user.Id">
                                <td>@user.Id</td>
                                <td>@user.UserName</td>
                                <td>@user.Email</td>
                                <td>@user.PhoneNumber</td>
                                <td><img src="~/img/@user.Picture" alt="@user.UserName" class="my-image-table" /></td>
                                <td>
                                    <button class="btn btn-primary btn-sm btn-update" data-id="@user.Id"><span class="fas fa-edit"></span></button>
                                    <button class="btn btn-danger btn-sm btn-delete" data-id="@user.Id"><span class="fas fa-minus-circle"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@if (Model.ResultStatus == ResultStatus.Error)
{
    <div class="alert alert-danger mt-3">
        @Model.Message <br />
        Dashboard sayfasına geri dönmek için lütfen <a class="alert-link" asp-area="Admin" asp-controller="Home" asp-action="Index">tıklayınız.</a>
    </div>
}
@section Scripts
    {
    <script>
        $(document).ready(function () {
            //Datatable
            const dataTable = $('#usersTable').DataTable({
                dom:
                    "<'row'<'col-sm-3'l><'col-sm-6 text-center'B><'col-sm-3'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                buttons: [
                    {
                        text: 'Ekle',
                        attr: {
                            id: "btnAdd"
                        },
                        className: 'btn btn-success',
                        action: function (e, dt, node, config) {

                        }
                    },
                    {
                        // Get Datas Button
                        text: 'Yenile',
                        className: 'btn btn-warning',
                        action: function (e, dt, node, config) {
                            $.ajax({
                                type: 'GET',
                                url: '/Admin/User/GetAllUsers',
                                contentType: 'apllicaton/json',
                                beforeSend: function () {
                                    $('#usersTable').hide();
                                    $('.spinner-border').show();
                                },
                                success: function (data) {
                                    const userListDto = jQuery.parseJSON(data);
                                    dataTable.clear();
                                    console.log(userListDto);
                                    if (userListDto.ResultStatus == 1) {
                                        $.each(userListDto.Users.$values,
                                            function (index, user) {
                                                const newTableRow = dataTable.row.add([
                                                    user.Id,
                                                    user.UserName,
                                                    user.Email,
                                                    user.PhoneNumber,
                                                    `<img src="/img/${user.Picture}" alt="${user.UserName}" class="my-image-table" />`,
                                                    `
                                        <button class="btn btn-primary btn-sm btn-update" data-id="${user.Id}"><span class="fas fa-edit"></span></button>
                                        <button class="btn btn-danger btn-sm btn-delete" data-id="${user.Id}"><span class="fas fa-minus-circle"></span></button>
                                                    `
                                                ]).node();
                                                const jqueryTableRow = $(newTableRow);
                                                jqueryTableRow.attr('name', `row_${user.Id}`);
                                            });
                                        dataTable.draw();
                                        $('.spinner-border').hide();
                                        $('#usersTable').fadeIn(1400);
                                    }
                                    else {
                                        toastr.error(`${userListDto.Message}`, 'İşlem Başarısız!');
                                    }
                                },
                                error: function (err) {
                                    console.log(err);
                                    $('.spinner-border').hide();
                                    $('#usersTable').fadeIn(1000);
                                    toastr.error(`${err.responseText}`, 'Hata!');
                                }
                            });
                        }
                    }
                ],
                language: {
                    "sDecimal": ",",
                    "sEmptyTable": "Tabloda herhangi bir veri mevcut değil",
                    "sInfo": "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                    "sInfoEmpty": "Kayıt yok",
                    "sInfoFiltered": "(_MAX_ kayıt içerisinden bulunan)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Sayfada _MENU_ kayıt göster",
                    "sLoadingRecords": "Yükleniyor...",
                    "sProcessing": "İşleniyor...",
                    "sSearch": "Ara:",
                    "sZeroRecords": "Eşleşen kayıt bulunamadı",
                    "oPaginate": {
                        "sFirst": "İlk",
                        "sLast": "Son",
                        "sNext": "Sonraki",
                        "sPrevious": "Önceki"
                    },
                    "oAria": {
                        "sSortAscending": ": artan sütun sıralamasını aktifleştir",
                        "sSortDescending": ": azalan sütun sıralamasını aktifleştir"
                    },
                    "select": {
                        "rows": {
                            "_": "%d kayıt seçildi",
                            "0": "",
                            "1": "1 kayıt seçildi"
                        }
                    }
                }
            });

            /* Ajax Get / Data Add. */

            $(function () {
                const url = `@Url.Action("Add","User")`;
                const placeHolder = $("#modalPlaceHolder");
                $("#btnAdd").click(function () {
                    $.get(url).done(function (data) {
                        placeHolder.html(data);
                        placeHolder.find(".modal").modal("show");
                    });
                });

                /* Ajax POST / Data Add. */

                placeHolder.on('click',
                    '#btnSave',
                    function (event) {
                        event.preventDefault();
                        const form = $('#form-user-add');
                        const actionUrl = form.attr('action');
                        const dataToSend = new FormData(form.get(0));

                        $.ajax({
                            url: actionUrl,
                            type: 'POST',
                            data: dataToSend,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                console.log(data);
                                const userAddAjaxModel = jQuery.parseJSON(data);
                                console.log(userAddAjaxModel);
                                const newFormBody = $('.modal-body', userAddAjaxModel.UserAddPartial);
                                placeHolder.find('.modal-body').replaceWith(newFormBody);
                                const isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                                if (isValid) {
                                    placeHolder.find('.modal').modal('hide');
                                    const newTableRow = dataTable.row.add([
                                        userAddAjaxModel.User.Id,
                                        userAddAjaxModel.User.UserName,
                                        userAddAjaxModel.User.Email,
                                        userAddAjaxModel.User.PhoneNumber,
                                        `<img src="/img/${userAddAjaxModel.User.Picture}" alt="${userAddAjaxModel.User.UserName}" class="my-image-table" />`,
                                        `
                                        <button class="btn btn-primary btn-sm btn-update" data-id="${userAddAjaxModel.User.Id}"><span class="fas fa-edit"></span></button>
                                        <button class="btn btn-danger btn-sm btn-delete" data-id="${userAddAjaxModel.User.Id}"><span class="fas fa-minus-circle"></span></button>
                                    `
                                    ]).node();
                                    const jqueryTableRow = $(newTableRow);
                                    jqueryTableRow.attr('name', `row_${userAddAjaxModel.User.Id}`);
                                    dataTable.row(newTableRow).draw();
                                    toastr.success(`${userAddAjaxModel.Message}`, 'Başarılı İşlem!');
                                } else {
                                    let summaryText = "";
                                    $('#validation-summary > ul > li').each(function () {
                                        let text = $(this).text();
                                        summaryText = `*${text}\n`;
                                    });
                                    toastr.warning(summaryText);
                                }
                            },
                            error: function (err) {
                                console.log(err);
                            }
                        });
                    });
            });

            /* Ajax POST / Data Delete. */

            $(document).on("click", ".btn-delete", function (event) {
                event.preventDefault();
                const id = $(this).attr("data-id");
                const tableRow = $(`[name="row_${id}"]`);
                const userName = $(`[name="row_${id}"]>td`).eq(1).text();
                Swal.fire({
                    title: "Silmek istediğinizden emin misiniz?",
                    text: `${userName} adlı kullanıcı silinecektir.`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Evet!",
                    cancelButtonText: "Hayır!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            type: "post",
                            dataType: "json",
                            async: true,
                            data: { userId: id },
                            url: '/Admin/User/Delete',
                            success: function (data) {
                                const jsonData = jQuery.parseJSON(data);
                                console.log(jsonData);
                                if (jsonData.ResultStatus === 1) {
                                    dataTable.row(tableRow).remove().draw();
                                    Swal.fire({
                                        title: "Silindi!",
                                        text: `${jsonData.User.UserName} başarıyla silindi.`,
                                        icon: "success"
                                    });


                                }
                                else {
                                    Swal.fire({
                                        icon: "error",
                                        title: "Hata",
                                        text: `${jsonData.Message}`
                                    });
                                }

                            },
                            error: function (err) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Hata",
                                    text: `${err}`
                                });
                            }
                        });

                    }
                });
            });

            /* Ajax GET / Data Update. */

            $(function () {
                const url = `@Url.Action("Update","User")`;
                const placeHolder = $("#modalPlaceHolder");
                $(document).on('click', '.btn-update', function (event) {
                    event.preventDefault();
                    const id = $(this).attr('data-id');
                    $.get(url, { userId: id }).done(function (data) {
                        placeHolder.html(data);
                        placeHolder.find('.modal').modal('show');
                    }).fail(function () {
                        toastr.error('Bir hata oluştu');
                    });
                });

                /* Ajax POST / Data Update. */

                placeHolder.on('click',
                    '#btnUpdate',
                    function (event) {

                        event.preventDefault();

                        const form = $('#form-user-update');
                        const actionUrl = form.attr('action');
                        const dataToSend = new FormData(form.get(0));
                        $.ajax({
                            url: actionUrl,
                            type: 'POST',
                            data: dataToSend,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                const userUpdateAjaxModel = jQuery.parseJSON(data);
                                console.log(userUpdateAjaxModel);
                                const id = userUpdateAjaxModel.User.Id;
                                const tableRow = $(`[name="row_${id}"]`);
                                console.log(tableRow);
                                const newFormBody = $('.modal-body', userUpdateAjaxModel.UserUpdatePartial);
                                placeHolder.find('.modal-body').replaceWith(newFormBody);
                                console.log(id);
                                const isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                                console.log(isValid);
                                if (isValid) {
                                    placeHolder.find('.modal').modal('hide');
                                    dataTable.row(tableRow).data([
                                        userUpdateAjaxModel.User.Id,
                                        userUpdateAjaxModel.User.UserName,
                                        userUpdateAjaxModel.User.Email,
                                        userUpdateAjaxModel.User.PhoneNumber,
                                        `<img src="/img/${userUpdateAjaxModel.User.Picture}" alt="${userUpdateAjaxModel.User.UserName}" class="my-image-table" />`,
                                        `
                                        <button class="btn btn-primary btn-sm btn-update" data-id="${userUpdateAjaxModel.User.Id}"><span class="fas fa-edit"></span></button>
                                        <button class="btn btn-danger btn-sm btn-delete" data-id="${userUpdateAjaxModel.User.Id}"><span class="fas fa-minus-circle"></span></button>
                                    `
                                    ]);
                                    tableRow.attr("name", `row_${id}`);
                                    dataTable.row(tableRow).invalidate();
                                    toastr.success(`${userUpdateAjaxModel.Message}`, "Başarılı İşlem!");
                                } else {
                                    let summaryText = "";
                                    $('#validation-summary > ul > li').each(function () {
                                        let text = $(this).text();
                                        summaryText = `*${text}\n`;
                                    });
                                    toastr.warning(summaryText);
                                }
                            },
                            error: function (error) {
                                console.log(error);
                            }
                        });
                    });
            });

        });


    </script>
}
